@page "/students"
@inject HttpClient Http



<PageTitle>Students</PageTitle>
<h1>Students</h1>


@if (students == null)
{
    <p><em>Loading...</em></p>
}

else {
    <QuickGrid Items="@FilteredStudents" Pagination="@pagination" style="width: 50%">
        <PropertyColumn Property="@(_ => _.StudentId)" Sortable="true"/>
        <TemplateColumn Title="Name" SortBy="@sortByName">
            <div class="flex items-center">
                <nobr>
                    @context.FirstName @context.LastName
                </nobr>
            </div>
        </TemplateColumn>
        <PropertyColumn Property="@(_ => _.School)" Sortable="true" />
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="studentFilter" @bind:event="oninput" placeholder="Search Students..." />
                </div>
            </ColumnOptions>
    </QuickGrid> 
    <Paginator State="@pagination" />
}

@code {
    private PaginationState pagination = new PaginationState { ItemsPerPage = 12 };
    
    string studentFilter;

    IQueryable<Student> FilteredStudents {
        get {
            var result = students;
            if (!string.IsNullOrEmpty(studentFilter))
            {
                result = result.Where(s => s.FirstName.Contains(studentFilter, StringComparison.CurrentCultureIgnoreCase) || s.LastName.Contains(studentFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            return result;
        }
        }

    GridSort<Student> sortByName = GridSort<Student>
    .ByAscending(_ => _.FirstName).ThenAscending(_ => _.LastName);

    private IQueryable<Student>? students;

    protected override async Task OnInitializedAsync()
    {
        string URL = $"{Constants.SchoolAPIBase}students";
        students = (await Http.GetFromJsonAsync<Student[]>(URL)).AsQueryable();
    } 
}
